name: 'Terraform CI/CD'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  id-token: write   # Necess치rio para autentica칞칚o OIDC
  contents: read    # Necess치rio para fazer o checkout do c칩digo
  pull-requests: write # Necess치rio para postar coment치rios no PR

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::579375260812:role/GitHubActionRole-DatabaseInfra # <-- SUBSTITUA PELO SEU ARN
          aws-region: us-east-1 # Substitua pela sua regi칚o

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        # Roda 'plan' apenas para Pull Requests
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false -var="db_password=${{ secrets.DB_PASSWORD }}"
        continue-on-error: true # Continua mesmo se o plano falhar para que o coment치rio seja postado

      - name: Update PR with Plan
        # Publica o resultado do 'plan' como um coment치rio no PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const output = `#### Terraform Plan 游닀\`\`\`\n${{ steps.plan.outputs.stdout }}\n\`\`\``;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Terraform Apply
        # Roda 'apply' apenas em merges para a branch 'main'
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -var="db_password=${{ secrets.DB_PASSWORD }}"
